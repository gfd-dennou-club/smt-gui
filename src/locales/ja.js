export default {
    "gui.menuBar.seeProjectPage": "プロジェクトページを見る",
    "gui.loader.creating": "プロジェクトを作成中...",
    "gui.smalruby3.crashMessage.description":
        "申し訳ありません。スモウルビーがクラッシュしたようです。このバグは自動的にスモウルビーチームに報告されました。ページを再読み込みしてください。",
    "gui.smalruby3.gui.defaultProjectTitle": "スモウルビーのプロジェクト",
    "gui.smalruby3.gui.rubyTab": "ルビー",
    "gui.smalruby3.previewInfo.betawelcome":
        "スモウルビー3.0 ベータ版にようこそ!",
    "gui.smalruby3.previewInfo.label": "スモウルビー3.0を試してみる",
    "gui.smalruby3.previewInfo.invitation":
        "私たちは次世代のスモウルビーを開発中です。お試しください!",
    "gui.smalruby3.previewInfo.welcome":
        "スモウルビー3.0 プレビュー版にようこそ!",
    "gui.smalruby3.menuBar.downloadRubyCodeToComputer":
        "コンピュータにルビーを保存する",
    "gui.smalruby3.menuBar.generateRubyFromCode":
        "コードからルビーに変換します",
    "gui.smalruby3.unsupportedBrowser.description":
        "申し訳ありません。スモウルビー3.0はInternet Explorer、Vivaldi、Opera、Silkをサポートしていません。Google Chrome、Mozilla Firefox、Microsoft Edgeのような新しいブラウザの利用をお勧めします。",
    "gui.smalruby3.webglModal.description":
        "残念ながら、ブラウザーやコンピューターが{webGlLink}ようです。この技術はスモウルビー3.0の実行に必須です。",
    "gui.smalruby3.alerts.convertRubyToBlocksError":
        "ルビーからコードに変換できませんでした。ルビーを修正してください！",
    "gui.smalruby3.telemetryOptIn.label":
        "スモウルビーを改善するための利用状況の報告",
    "gui.smalruby3.telemetryOptIn.body1":
        "スモウルビーの開発者は世界中でスモウルビーがどのように使われているのかを理解したいと考えています。その手助けのために、みなさんのスモウルビーの利用状況をスモウルビーの開発者に提供していただけないでしょうか。",
    "gui.smalruby3.telemetryOptIn.body2":
        "提供していただく情報にはどの言語を選択したか、どのブロックを使ったか、保存・読み込み・プロジェクトのアップロードなどのイベントを含みます。ただし、ユーザ名などの個人的な情報は一切含みません。",
    "gui.telemetryOptIn.buttonTextNo": "いいえ、結構です。",
    "gui.smalruby3.rubyToBlocksConverter.couldNotConvertPremitive":
        "「{ SOURCE }」はブロックに変換できません。",
    "gui.smalruby3.rubyToBlocksConverter.wrongInstruction":
        "「{ SOURCE }」は命令がまちがっています。",
    "gui.smalruby3.telemetryOptIn.buttonTextYes":
        "はい、スモウルビーの改善に協力します。",
    "gui.smalruby3.extension.mesh.name": "メッシュ",
    "gui.smalruby3.extension.mesh.description":
        "ネットワーク上でユーザー間のやりとりを行う。",
    "gui.extension.sample.name": "ルビークラブ",
    "gui.extension.sample.description": "ルビークラブ",
    "mesh.categoryName": "メッシュ",
    "mesh.sensorValue": "[NAME] センサーの値",
    "mesh.hostPeripheralName": "メッシュのホストになる 【{ MESH_ID }】",
    "mesh.clientPeripheralName": "メッシュに参加する 【{ MESH_ID }】",
    "mesh.registeredHost": "ホストとしてメッシュに登録しました 【{ MESH_ID }】",
    "mesh.joinedMesh": "メッシュに参加しました 【{ MESH_ID }】",
    "gui.smalruby3.extension.mesh.connectingMessage":
        "メッシュのネットワークに接続しています",
    "gui.smalruby3.extension.smalrubotS1.name": "スモウルボットS1",
    "gui.smalruby3.extension.smalrubotS1.description":
        "スモウルボットS1を制御する。",
    "gui.smalruby3.extension.smalrubotS1.connectingMessage":
        "スモウルボットS1に接続しています。",
    "smalrubotS1.categoryName": "スモウルボットS1",
    "smalrubotS1.action": "[ACTION]",
    "smalrubotS1.actionAndStopAfter": "[SECS] 秒 [ACTION]",
    "smalrubotS1.bendArm": "[SECS] 秒でアームを [DEGREE] 度に曲げる",
    "smalrubotS1.getSensorValue": "[POSITION] のセンサー",
    "smalrubotS1.turnLedOn": "[POSITION] のLEDをオンにする",
    "smalrubotS1.turnLedOff": "[POSITION] のLEDをオフにする",
    "smalrubotS1.getMotorSpeed": "[POSITION] DCモーターの速度 (%)",
    "smalrubotS1.setMotorSpeed":
        "[POSITION] DCモーターの速度を [SPEED] (%) にする",
    "smalrubotS1.setArmCalibration": "アームを [DEGREE] 度調整する",
    "smalrubotS1.actionMenu.forward": "進める",
    "smalrubotS1.actionMenu.backward": "バックさせる",
    "smalrubotS1.actionMenu.turnLeft": "左に曲げる",
    "smalrubotS1.actionMenu.turnRight": "右に曲げる",
    "smalrubotS1.actionMenu.stop": "止める",
    "smalrubotS1.positionsMenu.left": "左",
    "smalrubotS1.positionsMenu.right": "右",
    "smalrubotS1.positionsMenu.touch": "タッチ",
    "smalrubotS1.positionsMenu.light": "光",
    "smalrubotS1.positionsMenu.sound": "音",
    "gui.extension.rubyclub.name": "ルビークラブ",
    "gui.extension.rubyclub.description": "ルビークラブ",
    "rubyclub.name": "ルビークラブ",
    "rubyclub.command0": "コマンド",
    "rubyclub.command1": "コマンド[TEXT][NUM]",
    "rubyclub.command2": "コマンド[TEXT1]",
    "rubyclub.command3": "コマンド[TEXT1] [NUM1]",    
    "rubyclub.flag0": "真偽",    
    "rubyclub.value0": "値", 
    "gui.extension.kaniroboNormal.name": "蟹ロボ",
    "gui.extension.kaniroboNormal.description": "蟹ロボ",
    "kaniroboNormal.name": "蟹ロボ",
    "KaniroboNormal.Menu1.forward": "前",
    "KaniroboNormal.Menu1.backward": "後ろ",
    "KaniroboNormal.Menu3.enable": "有効",
    "KaniroboNormal.Menu3.disable": "無効",
    "kaniroboNormal.command0": "モーター有効化ピンを初期化",
    "kaniroboNormal.command1": "モーター有効化ピンを[TEXT1]化",
    "kaniroboNormal.command2": "モーター[TEXT2]を初期化",
    "kaniroboNormal.command3": "モーター[TEXT5]のスピードを初期化",
    "kaniroboNormal.command4": "モーター[TEXT2]を[TEXT3]方向にセット",
    "kaniroboNormal.command5": "モーター[TEXT5]のスピードを[NUM]にする",
    "kaniroboNormal.command6": "ライトセンサー[TEXT4]を初期化",
    "kaniroboNormal.value0": "ライトセンサー[TEXT4]の値",
    "kaniroboNormal.command7": "サーボモーター[TEXT7]を初期化",
    "kaniroboNormal.command8": "サーボモーター[TEXT6]の周波数を[NUM][NUM2]にする",
    "kaniroboNormal.command9": "サーボモーター[TEXT6]のデューティー比を[NUM]にする",
    "kaniroboNormal.value1": "[NUM]度",
    "gui.extension.sample.name": "サンプル",
    "gui.extension.sample.description": "サンプル",
    "sample.name": "サンプル",
    "sample.command0": "コマンド",
    "sample.command1": "コマンド[TEXT][NUM]",
    "sample.command2": "コマンド[TEXT1]",
    "sample.command3": "コマンド[TEXT1] [NUM1]",    
    "sample.flag0": "真偽",    
    "sample.value0": "値",  
    "OUTPUT.GPIO":"出力:GPIO [NUM1]を使う",   
    "INPUT.GPIO":"入力:GPIO [NUM1]を使う", 
    "PWM.GPIO":"PWM:GPIO[NUM1]を使う",    
    "ADC.GPIO":"ADC:GPIO[NUM1]を使う", 
    "SET.GPIO.OUT.VALUE":"出力:GPIO[NUM1]の値を[SETVALUE]にする",
    "INPUT.GPIO.VALUE":"入力:GPIO[NUM1]の値",
    "SET.GPIO.DUTY":"PWM:GPIO[NUM1]のデューティー比を[VALUE]にする",
    "SET.GPIO.FREQUENCY":"PWM:FPIO[NUM1]周波数を[VALUE]にする",
    "SET.GPIO.VOLT": "ADC:GPIO[VALUE]の電圧",
    "sample.value0": "値",    
    "gui.extension.i2c_uart.name": "I2C, UART",
    "gui.extension.i2c_uart.description": "I2C, UARTを使う",
    "i2c_uart.name": "I2C, UART",
    "i2c_uart.i2c_init": "I2C-[TEXT]: GPIO[NUM1], [NUM2] を使う(SCL, SDA)",
    "i2c_uart.i2c_write": "出力 I2C-[TEXT]: アドレス [NUM1], コマンド [NUM2], 値 [NUM3]",
    "i2c_uart.i2c_read": "入力 I2C-[TEXT]: アドレス [NUM1], バイト数 [NUM2]",
    "i2c_uart.uart_init": "UART-[TEXT] を使う",    
    "i2c_uart.uart_write": "出力 UART-[TEXT1]: [TEXT2]",    
    "i2c_uart.uart_read": "入力 I2C-[TEXT]",    
};

